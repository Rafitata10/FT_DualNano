#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 09, 2024 11:35:27 AM CEST  platform: Linux

#   Rafael Ramírez Salas
#   Ingeniería de Computadores, Universidad de Málaga
#   Trabajo de Fin de Grado 2024: Fail Tolerant DualNano

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import serial
import time

_location = os.path.dirname(__file__)

import FT_DualNano_support

# Definir la configuración de los puertos serie.
PORTS = ['/dev/ttyUSB0', '/dev/ttyUSB2']
BAUDRATE = 9600

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

text_color_A = None
text_color_B = None

# Función para inicializar la comunicación serie con un puerto específico.
def initialize_serial(self):
    # Inicializar la comunicación serie.
    self.serial_ports = []
    for port in PORTS:
        try:
            ser = serial.Serial(port, BAUDRATE)
            self.serial_ports.append(ser)
        except serial.SerialException:
            print(f"No se puede abrir el puerto {port}")

# Función para cerrar la conexión serie del puerto USB2 y abrir una nueva conexión después de 3 segundos.
def initialize_and_continue(self):
    # Buscar y cerrar la conexión serie del puerto USB2 si está abierta.
    for ser in self.serial_ports:
        if ser.port == '/dev/ttyUSB2' and ser.is_open:
            ser.close()
            self.serial_ports.remove(ser)  # Eliminar el puerto de la lista.
    # Esperar 3 segundos antes de intentar nuevamente la conexión.
    time.sleep(3)
    # Intentar abrir una nueva conexión solo con el puerto USB2.
    try:
        ser = serial.Serial('/dev/ttyUSB2', BAUDRATE)
        self.serial_ports.append(ser)  # Agregar el nuevo puerto a la lista.
    except serial.SerialException:
        print(f"No se puede abrir el puerto /dev/ttyUSB2")
    # Continuar leyendo datos después de 3 segundos.
    self.read_serial_data()

class FT_DualNano:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1103x813+365+138")
        top.minsize(1, 1)
        top.maxsize(1905, 1818)
        top.resizable(1,  1)
        top.title("FT DualNano")
        top.configure(background="#7a7a7a")

        self.top = top

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Comparator = tk.LabelFrame(self.top)
        self.Comparator.place(relx=0.412, rely=0.06, relheight=0.103
                , relwidth=0.135)
        self.Comparator.configure(borderwidth="0")
        self.Comparator.configure(font="-family {DejaVu Sans} -size 10")
        self.Comparator.configure(background="#ffffff")

        self.B_Controller = tk.Label(self.top)
        self.B_Controller.place(relx=0.742, rely=0.025, height=28, width=136)
        self.B_Controller.configure(activebackground="#d9d9d9")
        self.B_Controller.configure(anchor='w')
        self.B_Controller.configure(background="#7a7a7a")
        self.B_Controller.configure(compound='left')
        self.B_Controller.configure(font="-family {Umpush} -size 13 -weight bold")
        self.B_Controller.configure(text='  B_Controller')

        self.A_Controller = tk.Label(self.top)
        self.A_Controller.place(relx=0.128, rely=0.025, height=28, width=136)
        self.A_Controller.configure(activebackground="#d9d9d9")
        self.A_Controller.configure(anchor='w')
        self.A_Controller.configure(background="#7a7a7a")
        self.A_Controller.configure(compound='left')
        self.A_Controller.configure(font="-family {Umpush} -size 13 -weight bold")
        self.A_Controller.configure(text='  A_Controller')

        self.BController = tk.LabelFrame(self.top)
        self.BController.place(relx=0.724, rely=0.06, relheight=0.103
                , relwidth=0.137)
        self.BController.configure(borderwidth="0")
        self.BController.configure(font="-family {DejaVu Sans} -size 10")
        self.BController.configure(background="#ffffff")

        self.Green = tk.Label(self.top)
        self.Green.place(relx=0.44, rely=0.574, height=49, width=91)
        self.Green.configure(activebackground="#d9d9d9")
        self.Green.configure(anchor='w')
        self.Green.configure(background="#05ad05")
        self.Green.configure(compound='left')
        self.Green.configure(font="-family {DejaVu Sans} -size 10")
        self.Green.configure(text='   OK State')

        self.Purple = tk.Label(self.top)
        self.Purple.place(relx=0.44, rely=0.49, height=50, width=91)
        self.Purple.configure(activebackground="#d9d9d9")
        self.Purple.configure(anchor='w')
        self.Purple.configure(background="#884cd8")
        self.Purple.configure(compound='left')
        self.Purple.configure(font="-family {DejaVu Sans} -size 10")
        self.Purple.configure(text='   Checking')

        self.Blue = tk.Label(self.top)
        self.Blue.place(relx=0.44, rely=0.407, height=49, width=91)
        self.Blue.configure(activebackground="#d9d9d9")
        self.Blue.configure(anchor='w')
        self.Blue.configure(background="#1082c4")
        self.Blue.configure(compound='left')
        self.Blue.configure(font="-family {DejaVu Sans} -size 10")
        self.Blue.configure(text='   Reseting')

        self.Title = tk.Label(self.top)
        self.Title.place(relx=0.390, rely=0.239, height=46, width=250)
        self.Title.configure(activebackground="#d9d9d9")
        self.Title.configure(anchor='w')
        self.Title.configure(background="#7a7a7a")
        self.Title.configure(compound='left')
        self.Title.configure(font="-family {DejaVu Sans} -size 12 -weight bold -underline 1")
        self.Title.configure(text='Possible System States:')

        self.White = tk.Label(self.top)
        self.White.place(relx=0.44, rely=0.323, height=49, width=91)
        self.White.configure(activebackground="white")
        self.White.configure(background="white")
        self.White.configure(anchor='w')
        self.White.configure(compound='left')
        self.White.configure(font="-family {DejaVu Sans} -size 10")
        self.White.configure(text='    Waiting')

        self.AController = tk.LabelFrame(self.top)
        self.AController.place(relx=0.11, rely=0.06, relheight=0.103
                , relwidth=0.135)
        self.AController.configure(borderwidth="0")
        self.AController.configure(font="-family {DejaVu Sans} -size 10")
        self.AController.configure(background="#ffffff")

        self.Red = tk.Label(self.top)
        self.Red.place(relx=0.44, rely=0.658, height=48, width=91)
        self.Red.configure(activebackground="#d9d9d9")
        self.Red.configure(anchor='w')
        self.Red.configure(background="#d8131a")
        self.Red.configure(compound='left')
        self.Red.configure(font="-family {DejaVu Sans} -size 10")
        self.Red.configure(text='    ERROR')

        self.highFloater = tk.Label(self.top)
        self.highFloater.place(relx=0.009, rely=0.861, height=20, width=82)
        self.highFloater.configure(activebackground="#d9d9d9")
        self.highFloater.configure(anchor='w')
        self.highFloater.configure(background="#7a7a7a")
        self.highFloater.configure(compound='left')
        self.highFloater.configure(font="-family {DejaVu Sans} -size 10")
        self.highFloater.configure(text='''highFloater''')

        self.lowFloater = tk.Label(self.top)
        self.lowFloater.place(relx=0.091, rely=0.861, height=20, width=72)
        self.lowFloater.configure(activebackground="#d9d9d9")
        self.lowFloater.configure(anchor='w')
        self.lowFloater.configure(background="#7a7a7a")
        self.lowFloater.configure(compound='left')
        self.lowFloater.configure(font="-family {DejaVu Sans} -size 10")
        self.lowFloater.configure(text='''lowFloater''')

        self.highFloater_1 = tk.Label(self.top)
        self.highFloater_1.place(relx=0.635, rely=0.861, height=20, width=82)
        self.highFloater_1.configure(activebackground="#d9d9d9")
        self.highFloater_1.configure(anchor='w')
        self.highFloater_1.configure(background="#7a7a7a")
        self.highFloater_1.configure(compound='left')
        self.highFloater_1.configure(font="-family {DejaVu Sans} -size 10")
        self.highFloater_1.configure(text='''highFloater''')

        self.minTemp = tk.Label(self.top)
        self.minTemp.place(relx=0.160, rely=0.861, height=20, width=69)
        self.minTemp.configure(activebackground="#d9d9d9")
        self.minTemp.configure(anchor='w')
        self.minTemp.configure(background="#7a7a7a")
        self.minTemp.configure(compound='left')
        self.minTemp.configure(font="-family {DejaVu Sans} -size 10")
        self.minTemp.configure(text='''minTemp''')

        self.lowFloater_1 = tk.Label(self.top)
        self.lowFloater_1.place(relx=0.715, rely=0.861, height=20, width=79)
        self.lowFloater_1.configure(activebackground="#d9d9d9")
        self.lowFloater_1.configure(anchor='w')
        self.lowFloater_1.configure(background="#7a7a7a")
        self.lowFloater_1.configure(compound='left')
        self.lowFloater_1.configure(font="-family {DejaVu Sans} -size 10")
        self.lowFloater_1.configure(text='''lowFloater''')

        self.minTemp_1 = tk.Label(self.top)
        self.minTemp_1.place(relx=0.795, rely=0.861, height=20, width=70)
        self.minTemp_1.configure(activebackground="#d9d9d9")
        self.minTemp_1.configure(anchor='w')
        self.minTemp_1.configure(background="#7a7a7a")
        self.minTemp_1.configure(compound='left')
        self.minTemp_1.configure(font="-family {DejaVu Sans} -size 10")
        self.minTemp_1.configure(text='''minTemp''')

        self.Text_A = tk.Text(self.top)
        self.Text_A.place(relx=0.018, rely=0.191, relheight=0.661, relwidth=0.317)
        self.Text_A.configure(background="white")
        self.Text_A.configure(borderwidth="0")
        self.Text_A.configure(font="-family {DejaVu Sans} -size 10")
        self.Text_A.configure(selectbackground="#d9d9d9")
        self.Text_A.configure(wrap="word")

        self.Text_B = tk.Text(self.top)
        self.Text_B.place(relx=0.642, rely=0.191, relheight=0.661, relwidth=0.317)
        self.Text_B.configure(background="white")
        self.Text_B.configure(borderwidth="0")
        self.Text_B.configure(font="-family {DejaVu Sans} -size 10")
        self.Text_B.configure(selectbackground="#d9d9d9")
        self.Text_B.configure(wrap="word")

        self.maxTemp = tk.Label(self.top)
        self.maxTemp.place(relx=0.230, rely=0.861, height=20, width=70)
        self.maxTemp.configure(activebackground="#d9d9d9")
        self.maxTemp.configure(anchor='w')
        self.maxTemp.configure(background="#7a7a7a")
        self.maxTemp.configure(compound='left')
        self.maxTemp.configure(font="-family {DejaVu Sans} -size 10")
        self.maxTemp.configure(text='''maxTemp''')

        self.revolutions = tk.Label(self.top)
        self.revolutions.place(relx=0.317, rely=0.861, height=20, width=37)
        self.revolutions.configure(activebackground="#d9d9d9")
        self.revolutions.configure(anchor='w')
        self.revolutions.configure(background="#7a7a7a")
        self.revolutions.configure(compound='left')
        self.revolutions.configure(font="-family {DejaVu Sans} -size 10")
        self.revolutions.configure(text='''revs''')

        self.maxTemp_1 = tk.Label(self.top)
        self.maxTemp_1.place(relx=0.8675, rely=0.861, height=20, width=69)
        self.maxTemp_1.configure(activebackground="#d9d9d9")
        self.maxTemp_1.configure(anchor='w')
        self.maxTemp_1.configure(background="#7a7a7a")
        self.maxTemp_1.configure(compound='left')
        self.maxTemp_1.configure(font="-family {DejaVu Sans} -size 10")
        self.maxTemp_1.configure(text='''maxTemp''')

        self.revolutions_1 = tk.Label(self.top)
        self.revolutions_1.place(relx=0.940, rely=0.861, height=20, width=37)
        self.revolutions_1.configure(activebackground="#d9d9d9")
        self.revolutions_1.configure(anchor='w')
        self.revolutions_1.configure(background="#7a7a7a")
        self.revolutions_1.configure(compound='left')
        self.revolutions_1.configure(font="-family {DejaVu Sans} -size 10")
        self.revolutions_1.configure(text='''revs''')

        self.lFloater = tk.Frame(self.top)
        self.lFloater.place(relx=0.1, rely=0.897, relheight=0.031
                , relwidth=0.024)
        self.lFloater.configure(relief="groove")
        self.lFloater.configure(background="#d8131a")

        self.minT = tk.Frame(self.top)
        self.minT.place(relx=0.172, rely=0.897, relheight=0.031, relwidth=0.024)
        self.minT.configure(relief="groove")
        self.minT.configure(background="#d8131a")

        self.maxT = tk.Frame(self.top)
        self.maxT.place(relx=0.245, rely=0.897, relheight=0.031, relwidth=0.024)
        self.maxT.configure(relief="groove")
        self.maxT.configure(background="#d8131a")

        self.revols = tk.Frame(self.top)
        self.revols.place(relx=0.317, rely=0.897, relheight=0.031
                , relwidth=0.024)
        self.revols.configure(relief="groove")
        self.revols.configure(background="#d8131a")

        self.hFloater_1 = tk.Frame(self.top)
        self.hFloater_1.place(relx=0.653, rely=0.897, relheight=0.031
                , relwidth=0.025)
        self.hFloater_1.configure(relief="groove")
        self.hFloater_1.configure(background="#d8131a")

        self.lFloater_1 = tk.Frame(self.top)
        self.lFloater_1.place(relx=0.734, rely=0.897, relheight=0.031
                , relwidth=0.024)
        self.lFloater_1.configure(relief="groove")
        self.lFloater_1.configure(background="#d8131a")

        self.minT_1 = tk.Frame(self.top)
        self.minT_1.place(relx=0.810, rely=0.897, relheight=0.031
                , relwidth=0.024)
        self.minT_1.configure(relief="groove")
        self.minT_1.configure(background="#d8131a")

        self.maxT_1 = tk.Frame(self.top)
        self.maxT_1.place(relx=0.880, rely=0.897, relheight=0.031, relwidth=0.024)

        self.maxT_1.configure(relief="groove")
        self.maxT_1.configure(background="#d8131a")

        self.revols_1 = tk.Frame(self.top)
        self.revols_1.place(relx=0.940, rely=0.897, relheight=0.031
                , relwidth=0.024)
        self.revols_1.configure(relief="groove")
        self.revols_1.configure(background="#d8131a")

        self.hFloater = tk.Frame(self.top)
        self.hFloater.place(relx=0.027, rely=0.897, relheight=0.031
                , relwidth=0.025)
        self.hFloater.configure(relief="groove")
        self.hFloater.configure(background="#d8131a")

        self._Comparator = tk.Label(self.top)
        self._Comparator.place(relx=0.435, rely=0.030, height=16, width=131)
        self._Comparator.configure(activebackground="#d9d9d9")
        self._Comparator.configure(anchor='w')
        self._Comparator.configure(background="#7a7a7a")
        self._Comparator.configure(compound='left')
        self._Comparator.configure(font="-family {Umpush} -size 13 -weight bold")
        self._Comparator.configure(text=' Comparator')


        # Inicializar las etiquetas de los controladores A y B.
        self.Text_A.tag_configure("error", foreground="#d8131a")  # Color rojo para errores.
        self.Text_A.tag_configure("reset", foreground="#1082c4")  # Color azul para resets.
        self.Text_A.tag_configure("check", foreground="#884cd8")  # Color morado para check.
        self.Text_A.tag_configure("wait", foreground="#000000")  # Color negro para espera.
        self.Text_A.tag_configure("iam", foreground="#05ad05")  # Color verde para "I am".

        self.Text_B.tag_configure("error", foreground="#d8131a")  # Color rojo para errores.
        self.Text_B.tag_configure("reset", foreground="#1082c4")  # Color azul para resets.
        self.Text_B.tag_configure("check", foreground="#884cd8")  # Color morado para check.
        self.Text_B.tag_configure("wait", foreground="#000000")  # Color negro para espera.
        self.Text_B.tag_configure("iam", foreground="#05ad05")  # Color verde para "I am".

        # Inicializar la comunicación serie.
        initialize_serial(self)

        # Leer datos de los puertos serie y mostrarlos en las cajas de texto.
        self.top.after(100, self.read_serial_data)
    
    def read_serial_data(self):
        # Variables para rastrear los estados de los controladores A y B.
        controller_a_color = "#ffffff"  # Blanco por defecto.
        controller_b_color = "#fffffe"  # Blanco por defecto.
        global text_color_A
        global text_color_B

        for ser, text_box, controller_frame in zip(self.serial_ports, [self.Text_A, self.Text_B], [self.AController, self.BController]):
            try:
                if ser.in_waiting:
                    data = ser.readline().decode().strip()  # Leer datos del puerto serie.

                    # Cambiar el color del LabelFrame según el contenido del mensaje.
                    if "Reset" in data or "failure" in data or "Desconvertir" in data:
                        controller_frame.configure(background="#1082c4")  # Color azul.
                        if text_box == self.Text_A:
                            text_color_A = "reset"  # Color azul para el texto de Text_A.
                        elif text_box == self.Text_B:
                            text_color_B = "reset"  # Color azul para el texto de Text_B.
                    elif "ERROR" in data or "operator" in data:
                        controller_frame.configure(background="#d8131a")  # Color rojo.
                        self.Comparator.configure(background="#d8131a")
                        if text_box == self.Text_A:
                            text_color_A = "error"  # Color rojo para el texto de Text_A.
                        elif text_box == self.Text_B:
                            text_color_B = "error"  # Color rojo para el texto de Text_B.
                    elif "check" in data:
                        controller_frame.configure(background="#884cd8")  # Color morado.
                        if text_box == self.Text_A:
                            text_color_A = "check"  # Color morado para el texto de Text_A.
                        elif text_box == self.Text_B:
                            text_color_B = "check"  # Color morado para el texto de Text_B.
                    elif "button" in data:
                        controller_frame.configure(background="#ffffff")  # Color blanco.
                        text_color_A = "black"  # Color negro para el texto_A.
                        text_color_B = "black"  # Color negro para el texto_B.
                    elif "I am" in data:
                        controller_frame.configure(background="#05ad05")  # Color verde.
                        text_color_A = "black"  # Color negro para el textoA.
                        text_color_B = "black"  # Color negro para el texto_B.

                    # Default value if there is not any value.
                    if text_color_A is None:
                        text_color_A = "black"
                    elif text_color_A is None:
                        text_color_B = "black"

                    def process_tank_message(data, text_box, text_color):
                        # Procesar el mensaje y mostrar la información deseada.
                        tank_info = data[len("SRTank:"):].strip().split(", ")
                        volume = tank_info[5]  # Obtener el volumen del tanque.
                        temperature = tank_info[6]  # Obtener la temperatura del tanque.
                        tank_state_msg = f"SRTank state:\nVolume = {volume}l, Temperature = {temperature}°C"

                        # Insertar el mensaje en el text_box con el color correspondiente.
                        text_box.insert(tk.END, tank_state_msg + "\n", text_color)

                    def process_step_message(data, text_box, text_color):
                        # Obtener el número de STEP del mensaje.
                        step_number = int(data.split()[-1].strip("STEP"))
                        # Determinar el mensaje correspondiente al número de STEP.
                        step_messages = {
                            0: "Filling",
                            1: "Heating",
                            2: "Filling",
                            3: "Mixing",
                            4: "Cooling",
                            5: "Emptying"
                        }
                        # Construir el mensaje completo.
                        step_message = f"{data.strip()} -> {step_messages.get(step_number, 'Unknown')}"

                        # Insertar el mensaje en el text_box con el color correspondiente.
                        text_box.insert(tk.END, step_message + "\n", text_color)

                    # Insertar el mensaje en el text_box con el color correspondiente.
                    if text_box == self.Text_A:
                        if data.startswith("I am STEP"):
                            process_step_message(data, text_box, text_color_A)
                        elif data.startswith("SRTank:"):
                            process_tank_message(data, text_box, text_color_A)
                        else:
                            text_box.insert(tk.END, data + "\n", text_color_A)
                    elif text_box == self.Text_B:
                        if data.startswith("I am STEP"):
                            process_step_message(data, text_box, text_color_B)
                        elif data.startswith("SRTank:"):
                            process_tank_message(data, text_box, text_color_B)
                        else:
                            text_box.insert(tk.END, data + "\n", text_color_B)
                    text_box.see(tk.END)  # Hacer scroll automáticamente al final del texto.

                    # Actualizar el color del controlador A y B.
                    if controller_frame == self.AController:
                        controller_a_color = controller_frame.cget("background")
                    elif controller_frame == self.BController:
                        controller_b_color = controller_frame.cget("background")

                    # Analizar el mensaje para determinar si los nuevos frames deben cambiar de color.
                    if "SRTank" in data:
                        values = data.split(":")[1].strip().split(", ")[:5]
                        for flag, frame, frame_1 in zip(values, [self.hFloater, self.lFloater, self.maxT, self.minT, self.revols], [self.hFloater_1, self.lFloater_1, self.maxT_1, self.minT_1, self.revols_1]):
                            if flag == "1":
                                frame.configure(background="#05ad05")  # Color verde.
                                if frame_1:  # Verificar si frame_1 no es None.
                                    frame_1.configure(background="#05ad05")  # Color verde.
                            elif flag == "0":
                                frame.configure(background="#d8131a")  # Color rojo.
                                if frame_1:  # Verificar si frame_1 no es None.
                                    frame_1.configure(background="#d8131a")  # Color rojo.

            except UnicodeDecodeError as e:
                pass # Ignorar errores de decodificación Unicode y continuar con la lectura.
            except Exception as e:
                initialize_and_continue(self) # Serial Port Error, try to reconnect and continue reading.

        # Cambiar el color del LabelFrame "Comparator" según los estados de los controladores A y B.
        if controller_a_color == "#d8131a" or controller_b_color == "#d8131a":
            self.Comparator.configure(background="#d8131a")  # Color rojo.
        elif controller_a_color == "#ffffff" and controller_b_color == "#ffffff":
            self.Comparator.configure(background="#ffffff")  # Color blanco.
        elif controller_a_color == "#05ad05" and controller_b_color == "#05ad05":
            # Solo cambiar a verde si no estaba en verde previamente.
            if self.Comparator.cget("background") != "#05ad05":
                self.Comparator.configure(background="#05ad05")  # Color verde.

        self.top.after(1, self.read_serial_data)  # Volver a leer después de 1 ms.

def start_up():
    FT_DualNano_support.main()

if __name__ == '__main__':
    FT_DualNano_support.main()


# Path: PAGE/FT_DualNano.py