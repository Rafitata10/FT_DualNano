#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 07, 2024 12:51:13 PM CEST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import serial

_location = os.path.dirname(__file__)

import Prueba_support

# Definir la configuración de los puertos serie
PORTS = ['/dev/ttyUSB0', '/dev/ttyUSB2']
BAUDRATE = 9600

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("963x523+465+200")
        top.minsize(1, 1)
        top.maxsize(1905, 1818)
        top.resizable(1,  1)
        top.title("Prueba")
        top.configure(background="#a0a0a0")

        self.top = top

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.AController = tk.LabelFrame(self.top)
        self.AController.place(relx=0.104, rely=0.153, relheight=0.128
                , relwidth=0.135)
        self.AController.configure(relief='groove')
        self.AController.configure(font="-family {DejaVu Sans} -size 10")
        self.AController.configure(background="#05ad05")

        self.Text_A = tk.Text(self.top)
        self.Text_A.place(relx=0.021, rely=0.306, relheight=0.642
                , relwidth=0.317)
        self.Text_A.configure(background="white")
        self.Text_A.configure(borderwidth="0")
        self.Text_A.configure(font="-family {DejaVu Sans} -size 10")
        self.Text_A.configure(selectbackground="#d9d9d9")
        self.Text_A.configure(wrap="word")

        self.Comparator = tk.LabelFrame(self.top)
        self.Comparator.place(relx=0.426, rely=0.153, relheight=0.128
                , relwidth=0.137)
        self.Comparator.configure(relief='groove')
        self.Comparator.configure(font="-family {DejaVu Sans} -size 10")
        self.Comparator.configure(background="#1082c4")

        self._Comparator = tk.Label(self.top)
        self._Comparator.place(relx=0.447, rely=0.096, height=25, width=88)
        self._Comparator.configure(activebackground="#d9d9d9")
        self._Comparator.configure(anchor='w')
        self._Comparator.configure(background="#a0a0a0")
        self._Comparator.configure(compound='left')
        self._Comparator.configure(font="-family {DejaVu Sans} -size 10")
        self._Comparator.configure(text='''Comparator''')

        self.A_Controller = tk.Label(self.top)
        self.A_Controller.place(relx=0.125, rely=0.096, height=26, width=84)
        self.A_Controller.configure(activebackground="#d9d9d9")
        self.A_Controller.configure(anchor='w')
        self.A_Controller.configure(background="#a0a0a0")
        self.A_Controller.configure(compound='left')
        self.A_Controller.configure(font="-family {DejaVu Sans} -size 10")
        self.A_Controller.configure(text='''A_Controller''')

        self.B_Controller = tk.Label(self.top)
        self.B_Controller.place(relx=0.748, rely=0.096, height=26, width=82)
        self.B_Controller.configure(activebackground="#d9d9d9")
        self.B_Controller.configure(anchor='w')
        self.B_Controller.configure(background="#a0a0a0")
        self.B_Controller.configure(compound='left')
        self.B_Controller.configure(font="-family {DejaVu Sans} -size 10")
        self.B_Controller.configure(text='''B_Controller''')

        self.BController = tk.LabelFrame(self.top)
        self.BController.place(relx=0.727, rely=0.153, relheight=0.128
                , relwidth=0.137)
        self.BController.configure(relief='groove')
        self.BController.configure(font="-family {DejaVu Sans} -size 10")
        self.BController.configure(background="#d8131a")

        self.Text_B = tk.Text(self.top)
        self.Text_B.place(relx=0.644, rely=0.306, relheight=0.646
                , relwidth=0.316)
        self.Text_B.configure(background="white")
        self.Text_B.configure(borderwidth="0")
        self.Text_B.configure(font="TkTextFont")
        self.Text_B.configure(selectbackground="#d9d9d9")
        self.Text_B.configure(wrap="word")

        # Inicializar la comunicación serie
        self.serial_ports = []
        for port in PORTS:
            try:
                ser = serial.Serial(port, BAUDRATE)
                self.serial_ports.append(ser)
            except serial.SerialException:
                print(f"No se puede abrir el puerto {port}")

        # Leer datos de los puertos serie y mostrarlos en las cajas de texto
        self.top.after(100, self.read_serial_data)

    def read_serial_data(self):
        # Variables para rastrear los estados de los controladores A y B
        controller_a_color = "#ffffff"  # Blanco por defecto
        controller_b_color = "#fffffe"  # Blanco por defecto

        for ser, text_box, controller_frame in zip(self.serial_ports, [self.Text_A, self.Text_B], [self.AController, self.BController]):
            try:
                if ser.in_waiting:
                    data = ser.readline().decode().strip()  # Leer datos del puerto serie
                    text_box.insert(tk.END, data + "\n")  # Mostrar los datos en la caja de texto
                    text_box.see(tk.END)  # Hacer scroll automáticamente al final del texto

                    # Cambiar el color de fondo del LabelFrame según el contenido del mensaje
                    if "Reset" in data:
                        controller_frame.configure(background="#1082c4")  # Color azul
                    elif "ERROR" in data:
                        controller_frame.configure(background="#d8131a")  # Color rojo
                        # Cambiar el color del comparator a rojo si hay un error
                        self.Comparator.configure(background="#d8131a")
                    elif "check" in data:
                        controller_frame.configure(background="#884cd8")  # Color morado
                    elif "Wait" in data:
                        controller_frame.configure(background="#ffffff")  # Color blanco
                    elif "I am" in data:
                        controller_frame.configure(background="#05ad05")  # Color verde

                    # Actualizar el color del controlador A y B
                    if controller_frame == self.AController:
                        controller_a_color = controller_frame.cget("background")
                    elif controller_frame == self.BController:
                        controller_b_color = controller_frame.cget("background")

            except UnicodeDecodeError as e:
                # Nothing to do. Just ignore the error and try again.
                print()

        # Cambiar el color del LabelFrame "Comparator" según los estados de los controladores A y B
        if controller_a_color == "#d8131a" or controller_b_color == "#d8131a":
            self.Comparator.configure(background="#d8131a")  # Color rojo
        elif controller_a_color == "#ffffff" and controller_b_color == "#ffffff":
            self.Comparator.configure(background="#ffffff")  # Color blanco
        elif controller_a_color == "#05ad05" and controller_b_color == "#05ad05":
            # Solo cambiar a verde si no estaba en verde previamente
            if self.Comparator.cget("background") != "#05ad05":
                self.Comparator.configure(background="#05ad05")  # Color verde

        self.top.after(50, self.read_serial_data)  # Volver a leer después de 50 ms.



def start_up():
    Prueba_support.main()

if __name__ == '__main__':
    Prueba_support.main()




